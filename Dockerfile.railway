# Simplified Railway deployment - backend serves frontend
FROM node:20-alpine

# Install build tools for native modules and audio processing
RUN apk add --no-cache python3 make g++ sox ffmpeg espeak espeak-dev

# Install Python dependencies for TTS
RUN python3 -m pip install --no-cache-dir piper-tts

# Install dependencies for backend
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm ci

# Copy and build backend
COPY backend/ ./

# Rebuild SQLite3 for the container architecture
RUN npm rebuild sqlite3

RUN npm run build

# Build frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

# Move built frontend to backend public directory
RUN mkdir -p /app/backend/public
RUN cp -r dist/* /app/backend/public/

# Set working directory back to backend
WORKDIR /app/backend

# Create TTS models directory and download models
RUN mkdir -p tts-models

# Download TTS models (using a lightweight model for Railway)
RUN python3 -m piper.download --model en_US-lessac-medium --output_dir tts-models/ || \
    echo "Model download failed, will use fallback"

# Set environment variables
ENV OPENROUTER_API_KEY=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
ENV NODE_ENV=production
ENV TTS_MODEL=en_US-lessac-medium

# Expose port (Railway will set PORT env var)
EXPOSE $PORT

# Start the backend server
CMD ["node", "dist/index.js"]