# Simplified Railway deployment - backend serves frontend
FROM node:20-alpine

# Install build tools for native modules and audio processing
RUN apk add --no-cache python3 make g++ sox ffmpeg espeak espeak-dev py3-pip

# Create virtual environment and install Edge TTS
RUN python3 -m venv /opt/venv && \
    /opt/venv/bin/pip install --upgrade pip && \
    /opt/venv/bin/pip install --no-cache-dir edge-tts

# Install dependencies for backend
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm ci

# Copy and build backend
COPY backend/ ./

# Rebuild SQLite3 for the container architecture
RUN npm rebuild sqlite3

RUN npm run build

# Build frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

# Move built frontend to backend public directory
RUN mkdir -p /app/backend/public
RUN cp -r dist/* /app/backend/public/

# Set working directory back to backend
WORKDIR /app/backend

# Create TTS models directory for future use
RUN mkdir -p tts-models

# Set environment variables
ENV NODE_ENV=production
ENV TTS_MODEL=en_US-lessac-medium
# Note: OPENROUTER_API_KEY should be set in Railway dashboard as environment variable

# Expose port (Railway will set PORT env var)
EXPOSE $PORT

# Start the backend server
CMD ["node", "dist/index.js"]